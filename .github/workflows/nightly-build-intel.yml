# Parts of configuration file are based on the examples in this repository:
# https://github.com/oneapi-src/oneapi-ci
#
# Which have the following copyright:
# SPDX-FileCopyrightText: 2020 Intel Corporation
#
# SPDX-License-Identifier: MIT

name: MODFLOW 6 intel nightly build

on:
  schedule:
    - cron: '0 2 * * *' # run at 2 AM UTC
    # - cron: '*/10 * * * *' # run every 10 minutes
    # - cron: '20 */1 * * *' # run every hour at 20 minutes past the hour
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  FC: ifort

jobs:
  build_for_os:
    name: compile code
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            artifact_name: linux.zip
          - os: macos-latest
            artifact_name: mac.zip
          - os: windows-latest
            artifact_name: win64.zip
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2.3.4

      - name: Setup Python
        uses: actions/setup-python@v4.0.0
        with:
          python-version: 3.9

      - name: Install Python packages
        run: |
          pip install -r requirements.txt
          pip list

      - name: Install ifort
        uses: modflowpy/install-intelfortran-action@v1

      - name: Checkout modflow6
        uses: actions/checkout@v3
        with:
          repository: MODFLOW-USGS/modflow6
          path: modflow6

      - name: Update flopy classes
        working-directory: modflow6/autotest
        run: |
          python update_flopy.py

      - name: Build and zip
        if: runner.os != 'Windows'
        working-directory: modflow6/distribution
        run: |
          python build_nightly.py

      - name: Build and zip (Windows)
        if: runner.os == 'Windows'
        working-directory: modflow6/distribution
        run: |
          export PATH="/C/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/MSVC/14.33.31629/bin/Hostx64/x64":$PATH
          python build_nightly.py

      - name: Move the build zip file
        run: |
          ls -l ./modflow6/distribution/*
          mv ./modflow6/distribution/temp_zip/${{ matrix.artifact_name }} ./${{ matrix.artifact_name }}
          ls -l ./

      - name: Copy the modflow6/docs directory
        if: runner.os == 'Linux'
        shell: python
        run: |
          import shutil
          src = "/home/runner/work/modflow6-nightly-build/modflow6-nightly-build/modflow6/doc/"
          dst = "./doc/"
          shutil.copytree(src, dst)

      - name: Install TeX Live
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt install texlive-latex-extra texlive-science texlive-font-utils

      - name: Clone USGS LaTeX repo
        if: runner.os == 'Linux'
        run: |
          git clone https://github.com/MODFLOW-USGS/usgslatex.git usgslatex

      - name: Install USGS LaTeX style files and Univers font
        if: runner.os == 'Linux'
        working-directory: ./usgslatex/usgsLaTeX
        run: |
          sudo ./install.sh --all-users

      - name: Build mf6io latex document
        if: runner.os == 'Linux'
        shell: python
        run: |
          import sys
          import subprocess
          
          ws = "./modflow6/doc/mf6io/"
          bibnam = "mf6io"
          texnam = bibnam + ".tex"
          cmds = [
                  ["pdflatex", texnam],
                  ["bibtex", bibnam],
                  ["pdflatex", texnam],
                  ["pdflatex", texnam],
                 ]
          for cmd in cmds:
              print("running command...'{}'".format(" ".join(cmd)))
              with subprocess.Popen(cmd,
                                    stdout=subprocess.PIPE,
                                    stderr=subprocess.STDOUT,
                                    cwd=ws) as process:
                  stdout, stderr = process.communicate(timeout=10)
                  if stdout:
                      stdout = stdout.decode()
                      print(stdout)
                  if stderr:
                      print("\n\nError condition occurred:\n")
                      stderr = stderr.decode()
                      print(stderr)

      - name: Move the LaTeX document
        if: runner.os == 'Linux'
        run: |
          ls -la ./modflow6/doc/mf6io/
          mv ./modflow6/doc/mf6io/mf6io.pdf mf6io.pdf
          ls -la ./

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          name: nightly
          path: |
            ./${{ matrix.artifact_name }}

      - name: Upload additional Build Artifacts
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v3.1.0
        with:
          name: nightly
          path: |
            ./mf6io.pdf

  # make the release if previous job was successful
  release:
    name: Make a nightly release
    needs: build_for_os
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash

    if:
      github.event_name == 'push' || github.event_name == 'schedule'

    steps:
      - name: Delete Older Releases
        uses: dev-drprasad/delete-older-releases@v0.2.0
        with:
          keep_latest: 30
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download a Build Artifact
        uses: actions/download-artifact@v3.0.0
        with:
          name: nightly
          path: ./nightly/

      - name: List files in the artifact directory
        run: |
          pwd
          ls -l ./nightly/

      - name: Get Current Time
        uses: josStorer/get-current-time@v2.0.0
        id: current-time
        with:
          format: YYYYMMDD

      - name: Use current time
        env:
          TIME: "${{ steps.current-time.outputs.time }}"
          F_TIME: "${{ steps.current-time.outputs.formattedTime }}"
        run: echo $TIME $F_TIME

      - name: Create a Release
        uses: ncipollo/release-action@v1.10.0
        with:
          tag: ${{ steps.current-time.outputs.formattedTime }}
          name: ${{ steps.current-time.outputs.formattedTime }} nightly build
          body: "OneAPI version of Intel ifort compiler used to compile executables for all operating systems."
          draft: false
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload compiled executables to the latest GitHub release
        uses: svenstaro/upload-release-action@2.3.0
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./nightly/*
          tag: ${{ steps.current-time.outputs.formattedTime }}
          overwrite: true
          file_glob: true

      - name: Delete Artifact
        uses: GeekyEggo/delete-artifact@v1.0.0
        with:
          name: nightly
